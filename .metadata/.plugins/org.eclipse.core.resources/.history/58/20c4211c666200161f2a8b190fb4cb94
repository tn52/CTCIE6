package RecursionAndDP;

import java.util.ArrayList;

import DataStructures.Coordinate;

public class RobotinaGrid {
	/**
	 * Imagine a robot sitting on the upper left corner of grid with r rows and c columns. 
	 * The robot can only move in two directions, right and down, but certain cells are
	 * "off limits" such that the robot cannot step on them. Design an algorithm to find a
	 * path for the robot from the top left to the bottom right. 
	 * 
	 * @param {int} r - number of rows 
	 * @param {int} c - number of columns
	 * @param {ArrayList<Coordinate>} list of off limit coordinates
	 * @return {ArrayList<Coordinate>} list of coordinates representing path
	 */
	
	static ArrayList<Coordinate> offLimit = new ArrayList<Coordinate>();
	static int numRows;
	static int numCols;
	
	
	public static ArrayList<Coordinate> robotGrid(int r, int c, ArrayList<Coordinate> path){
		
		if(isOffLimit(r,c)){
			return path;
		}
		else if(r<0 || r>=numRows || c<0 || c>=numCols){
			return path;
		}
		
		else if(r==numRows-1 && c==numCols-1){
			return path;
		}
		
		else 
			path.add(new Coordinate(r,c));
		
		
		return robotGrid(r+1, c, path);
			
		
		
	}
	
	
	
	
	public static void main(String args[]){
		/**
		 * start at position 0,0 (top left), aim to reach r,c
		 * 
		 */
		
		
	}
	
	
	public static boolean isOffLimit(int r, int c){
		for(Coordinate coord:offLimit){
			if(coord.x==r && coord.y==c)
				return false;
		}
		return true;
		
	}
	
	
	
}
